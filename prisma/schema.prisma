// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/lib/validators"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Subreddit {
  id   Int    @id @default(autoincrement())
  name String @unique /// @zod.min(3).max(21)

  description String /// @zod.max(500)
  title       String /// @zod.max(50)

  moderators  Moderator[]
  posts       Post[]
  subscribers Subscription[]
}

model Moderator {
  moderatorId String
  subredditId Int

  head Boolean

  moderator User      @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  subreddit Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)

  @@id([subredditId, moderatorId])
  @@index([subredditId])
  @@index([moderatorId])
}

model Subscription {
  subredditId  Int
  subscriberId String

  subreddit  Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subscriber User      @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@id([subredditId, subscriberId])
  @@index([subredditId])
  @@index([subscriberId])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String /// @zod.min(3).max(50)
  content   String?
  url       String?

  authorId    String
  subredditId Int

  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  subreddit Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)

  comments Comment[]
  votes    PostVote[]

  @@index([authorId])
  @@index([subredditId])
}

model PostVote {
  postId Int
  userId String

  vote Int /// @zod.min(-1).max(1)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  authorId String
  parentId Int?
  postId   Int

  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  children Comment[]     @relation("children")
  parent   Comment?      @relation("children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post     Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  votes    CommentVote[]

  @@index([authorId])
  @@index([parentId])
  @@index([postId])
}

model CommentVote {
  commentId Int
  userId    String

  vote Int /// @zod.min(-1).max(1)

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

// AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts            Account[]
  moderatedSubreddits Moderator[]
  posts               Post[]
  postVotes           PostVote[]
  sessions            Session[]
  subscriptions       Subscription[]
  Comment             Comment[]
  CommentVote         CommentVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
